{
	"info": {
		"_postman_id": "9f81884e-e91c-440b-98a7-08d7371bd607",
		"name": "Restaurant Management API",
		"description": "Collection for testing the Restaurant Management API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29442715"
	},
	"item": [
		{
			"name": "Data",
			"item": [
				{
					"name": "Clear data",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/clear-database",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"clear-database"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Restaurants",
			"item": [
				{
					"name": "Create restaurant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"pm.globals.set(\"restaurantId\", jsonData.id);\r",
									"\r",
									"pm.test(\"Status code is 201\", function() {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has id property\", function() {\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function() {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Italian Delight\",\n    \"address\": \"123 Main St, City\",\n    \"kitchenType\": \"Italian\",\n    \"webSite\": \"https://italiandelight.com\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/restaurants",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"restaurants"
							]
						},
						"description": "Create a new restaurant"
					},
					"response": []
				},
				{
					"name": "Create invalid restaurant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Italian Delight\",\n    \"address\": \"123 Main St, City\",\n    \"kitchenType\": \"invalid kitchenType\",\n    \"webSite\": \"https://italiandelight.com\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/restaurants",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"restaurants"
							]
						},
						"description": "Create a new restaurant"
					},
					"response": []
				},
				{
					"name": "Get all restaurants",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Number of restaurants > '+0, function () {\r",
									"    var data = pm.response.json()\r",
									"    pm.expect(data.length).to.greaterThan(0)\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function() {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function() {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(Array.isArray(data)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/restaurants",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"restaurants"
							]
						},
						"description": "Get a list of all restaurants"
					},
					"response": []
				},
				{
					"name": "Get restaurant by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has id property\", function() {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data).to.have.property('id');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has name property\", function() {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data).to.have.property('name');\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function() {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/restaurants/{{restaurantId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"restaurants",
								"{{restaurantId}}"
							]
						},
						"description": "Get a specific restaurant by ID"
					},
					"response": []
				},
				{
					"name": "Get restaurant by non existing ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"   pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Get expected error message\", function () {\r",
									"   var data = pm.response.json();\r",
									"   pm.expect(data.error).to.eql(\"Not Found\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function() {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/restaurants/000000",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"restaurants",
								"000000"
							]
						},
						"description": "Get a specific restaurant by ID"
					},
					"response": []
				},
				{
					"name": "Update restaurant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Restaurant name was updated\", function() {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.name).to.eql(\"Italian Delight Updated\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response has id property\", function() {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data).to.have.property('id');\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function() {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Italian Delight Updated\",\n    \"address\": \"456 New St, City\",\n    \"kitchenType\": \"Italian\",\n    \"webSite\": \"https://italiandelight-updated.com\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/restaurants/{{restaurantId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"restaurants",
								"{{restaurantId}}"
							]
						},
						"description": "Update an existing restaurant"
					},
					"response": []
				},
				{
					"name": "Update non existing restaurant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"   pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Get expected error message\", function () {\r",
									"   var data = pm.response.json();\r",
									"   pm.expect(data.error).to.eql(\"Not Found\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function() {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Italian Delight Updated\",\n    \"address\": \"456 New St, City\",\n    \"kitchenType\": \"Italian\",\n    \"webSite\": \"https://italiandelight-updated.com\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/restaurants/000000",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"restaurants",
								"000000"
							]
						},
						"description": "Update an existing restaurant"
					},
					"response": []
				},
				{
					"name": "Delete restaurant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is empty\", function () {\r",
									"    pm.response.to.not.have.body();\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/restaurants/{{restaurantId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"restaurants",
								"{{restaurantId}}"
							]
						},
						"description": "Delete a restaurant by ID"
					},
					"response": []
				},
				{
					"name": "Delete non existing restaurant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"   pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Get expected error message\", function () {\r",
									"   var data = pm.response.json();\r",
									"   pm.expect(data.error).to.eql(\"Not Found\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function() {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/restaurants/000000",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"restaurants",
								"000000"
							]
						},
						"description": "Delete a restaurant by ID"
					},
					"response": []
				}
			]
		},
		{
			"name": "Dishes",
			"item": [
				{
					"name": "Create dish",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"pm.globals.set(\"dishId\", jsonData.id);\r",
									"\r",
									"pm.test(\"Status code is 201\", function() {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has id property\", function() {\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function() {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Spaghetti Carbonara\",\n    \"description\": \"Classic Italian pasta dish with eggs, cheese, pancetta, and black pepper\",\n    \"price\": 12.99,\n    \"category\": \"main course\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/dishes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"dishes"
							]
						},
						"description": "Create a new dish"
					},
					"response": []
				},
				{
					"name": "Create invalid dish",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Spaghetti Carbonara\",\n    \"description\": \"Classic Italian pasta dish with eggs, cheese, pancetta, and black pepper\",\n    \"price\": 12.99,\n    \"category\": \"invalid category\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/dishes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"dishes"
							]
						},
						"description": "Create a new dish"
					},
					"response": []
				},
				{
					"name": "Get all dishes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Number of dishes > '+0, function () {\r",
									"    var data = pm.response.json()\r",
									"    pm.expect(data.length).to.greaterThan(0)\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function() {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function() {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(Array.isArray(data)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/dishes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"dishes"
							]
						},
						"description": "Get a list of all dishes"
					},
					"response": []
				},
				{
					"name": "Get dish by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has id property\", function() {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data).to.have.property('id');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has name property\", function() {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data).to.have.property('name');\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function() {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/dishes/{{dishId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"dishes",
								"{{dishId}}"
							]
						},
						"description": "Get a specific dish by ID"
					},
					"response": []
				},
				{
					"name": "Get dish by non existing ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"   pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Get expected error message\", function () {\r",
									"   var data = pm.response.json();\r",
									"   pm.expect(data.error).to.eql(\"Not Found\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function() {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/dishes/000000",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"dishes",
								"000000"
							]
						},
						"description": "Get a specific dish by ID"
					},
					"response": []
				},
				{
					"name": "Update dish",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Restaurant name was updated\", function() {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.name).to.eql(\"Spaghetti Carbonara Deluxe\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response has id property\", function() {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data).to.have.property('id');\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function() {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Spaghetti Carbonara Deluxe\",\n    \"description\": \"Premium Italian pasta dish with eggs, cheese, pancetta, and black pepper\",\n    \"price\": 15.99,\n    \"category\": \"main course\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/dishes/{{dishId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"dishes",
								"{{dishId}}"
							]
						},
						"description": "Update an existing dish"
					},
					"response": []
				},
				{
					"name": "Update non existing dish",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"   pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Get expected error message\", function () {\r",
									"   var data = pm.response.json();\r",
									"   pm.expect(data.error).to.eql(\"Not Found\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function() {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Spaghetti Carbonara Deluxe\",\n    \"description\": \"Premium Italian pasta dish with eggs, cheese, pancetta, and black pepper\",\n    \"price\": 15.99,\n    \"category\": \"main course\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/dishes/000000",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"dishes",
								"000000"
							]
						},
						"description": "Update an existing dish"
					},
					"response": []
				},
				{
					"name": "Delete dish",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is empty\", function () {\r",
									"    pm.response.to.not.have.body();\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/dishes/{{dishId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"dishes",
								"{{dishId}}"
							]
						},
						"description": "Delete a dish by ID"
					},
					"response": []
				},
				{
					"name": "Delete non existing dish",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"   pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Get expected error message\", function () {\r",
									"   var data = pm.response.json();\r",
									"   pm.expect(data.error).to.eql(\"Not Found\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function() {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/dishes/000000",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"dishes",
								"000000"
							]
						},
						"description": "Delete a dish by ID"
					},
					"response": []
				}
			]
		},
		{
			"name": "Restaurant-Dish",
			"item": [
				{
					"name": "Create restaurant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"pm.globals.set(\"restaurantId\", jsonData.id);\r",
									"\r",
									"pm.test(\"Status code is 201\", function() {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has id property\", function() {\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function() {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Italian Delight\",\n    \"address\": \"123 Main St, City\",\n    \"kitchenType\": \"Italian\",\n    \"webSite\": \"https://italiandelight.com\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/restaurants",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"restaurants"
							]
						},
						"description": "Create a new restaurant"
					},
					"response": []
				},
				{
					"name": "Create dish",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"pm.globals.set(\"dishId\", jsonData.id);\r",
									"\r",
									"pm.test(\"Status code is 201\", function() {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has id property\", function() {\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function() {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Spaghetti Carbonara\",\n    \"description\": \"Classic Italian pasta dish with eggs, cheese, pancetta, and black pepper\",\n    \"price\": 12.99,\n    \"category\": \"main course\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/dishes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"dishes"
							]
						},
						"description": "Create a new dish"
					},
					"response": []
				},
				{
					"name": "Add dish to restaurant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function() {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function() {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/restaurants/{{restaurantId}}/dishes/{{dishId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"restaurants",
								"{{restaurantId}}",
								"dishes",
								"{{dishId}}"
							]
						},
						"description": "Add a dish to a restaurant"
					},
					"response": []
				},
				{
					"name": "Add non existing dish to restaurant",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/restaurants/{{restaurantId}}/dishes/000000",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"restaurants",
								"{{restaurantId}}",
								"dishes",
								"000000"
							]
						},
						"description": "Add a dish to a restaurant"
					},
					"response": []
				},
				{
					"name": "Get restaurant dishes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Number of restaurant dishes > '+0, function () {\r",
									"    var data = pm.response.json()\r",
									"    pm.expect(data.length).to.greaterThan(0)\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function() {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function() {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(Array.isArray(data)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/restaurants/{{restaurantId}}/dishes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"restaurants",
								"{{restaurantId}}",
								"dishes"
							]
						},
						"description": "Get all dishes for a specific restaurant"
					},
					"response": []
				},
				{
					"name": "Get restaurant dish",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has id property\", function() {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data).to.have.property('id');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has name property\", function() {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data).to.have.property('name');\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function() {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/restaurants/{{restaurantId}}/dishes/{{dishId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"restaurants",
								"{{restaurantId}}",
								"dishes",
								"{{dishId}}"
							]
						},
						"description": "Get all dishes for a specific restaurant"
					},
					"response": []
				},
				{
					"name": "Get restaurant non existing dish",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"   pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Get expected error message\", function () {\r",
									"   var data = pm.response.json();\r",
									"   pm.expect(data.error).to.eql(\"Not Found\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function() {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/restaurants/{{restaurantId}}/dishes/000000",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"restaurants",
								"{{restaurantId}}",
								"dishes",
								"000000"
							]
						},
						"description": "Get all dishes for a specific restaurant"
					},
					"response": []
				},
				{
					"name": "Update dish of restaurant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has id property\", function() {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data).to.have.property('id');\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function() {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"dishIds\": [{{dishId}}]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/restaurants/{{restaurantId}}/dishes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"restaurants",
								"{{restaurantId}}",
								"dishes"
							]
						},
						"description": "Add a dish to a restaurant"
					},
					"response": []
				},
				{
					"name": "Update non existing dish of restaurant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"   pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Get expected error message\", function () {\r",
									"   var data = pm.response.json();\r",
									"   pm.expect(data.error).to.eql(\"Not Found\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function() {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"dishIds\": [0]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/restaurants/{{restaurantId}}/dishes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"restaurants",
								"{{restaurantId}}",
								"dishes"
							]
						},
						"description": "Add a dish to a restaurant"
					},
					"response": []
				},
				{
					"name": "Remove dish from restaurant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/restaurants/{{restaurantId}}/dishes/{{dishId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"restaurants",
								"{{restaurantId}}",
								"dishes",
								"{{dishId}}"
							]
						},
						"description": "Remove a dish from a restaurant"
					},
					"response": []
				},
				{
					"name": "Remove non existing dish from restaurant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"   pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Get expected error message\", function () {\r",
									"   var data = pm.response.json();\r",
									"   pm.expect(data.error).to.eql(\"Not Found\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function() {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/restaurants/{{restaurantId}}/dishes/000000",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"restaurants",
								"{{restaurantId}}",
								"dishes",
								"000000"
							]
						},
						"description": "Remove a dish from a restaurant"
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000",
			"type": "string"
		}
	]
}